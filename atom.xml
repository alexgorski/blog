<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alex Gorski's Blog]]></title>
  <link href="http://alexgorski.github.com/blog//atom.xml" rel="self"/>
  <link href="http://alexgorski.github.com/blog//"/>
  <updated>2013-03-20T10:01:30-04:00</updated>
  <id>http://alexgorski.github.com/blog//</id>
  <author>
    <name><![CDATA[Alex Gorski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[focusing on math]]></title>
    <link href="http://alexgorski.github.com/blog//blog/2013/03/19/focusing-on-math/"/>
    <updated>2013-03-19T23:32:00-04:00</updated>
    <id>http://alexgorski.github.com/blog//blog/2013/03/19/focusing-on-math</id>
    <content type="html"><![CDATA[<p>https://github.com/alexgorski/practice-calculator</p>

<p>Ever since Jon Grover spent a week working with us on various Javascript concepts and exercises, I have been appending his calculator files. The end goal is for the user to select a level and operator and have the application create questions. The user&#8217;s answers are scored in browser and the total correct and wrong are tracked.</p>

<p>I became familiar with the on() function to insert random numbers for each question as user entered the answer input field.</p>

<p>$(this).on(&#8220;focus&#8221;, &#8220;input&#8221;, function(){</p>

<pre><code>x = (Math.random()*gear_level*10)+1;
y = (Math.random()*gear_level*10)+1;
x = parseInt(x);
y = parseInt(y);
$(this).parent('td').children("span:first").replaceWith("&lt;span&gt;"+x+"&lt;/span&gt;");
$(this).parent('td').children("span:last").replaceWith("&lt;span&gt;"+y+"&lt;/span&gt;");
$(this).parent('td').children("span:nth-child(2)").replaceWith("&lt;span&gt;"+operator_level+"&lt;/span&gt;";
</code></pre>

<p>  }
 )
;</p>

<p>The second part fires when a user enters an answer. The change() function evaluates whether the user&#8217;s input in the answer field matches the correct answer. If it is correct, the total_right variable is appended with the correct answer, if not it goes into total_wrong.</p>

<p>$(&#8220;input&#8221;).change(function(){</p>

<pre><code>z = parseInt($(this).val());
if (z === (x + y))
  {
  $(this).css("color", "green");
  right.push(z);
  $("#total_right").replaceWith("&lt;span id='total_right'&gt;"+right.length+"&lt;/span&gt;");
  }
else
  {
  $(this).css("color","red");
  wrong.push(z);
  $("#total_wrong").replaceWith("&lt;span id='total_wrong'&gt;"+wrong.length+"&lt;/span&gt;");
  }
});
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sports Scrape]]></title>
    <link href="http://alexgorski.github.com/blog//blog/2013/02/21/sports-scrape/"/>
    <updated>2013-02-21T06:41:00-05:00</updated>
    <id>http://alexgorski.github.com/blog//blog/2013/02/21/sports-scrape</id>
    <content type="html"><![CDATA[<p>When we were first introduced to the Nokogiri gem for scraping the webz it seemed like every classmate&#8217;s mental wheels started turning at the possibilities. I began thinking about sports.</p>

<p>Real-time sports data feeds can be expensive, especially when there are very few options. For a project requiring fresh but not real-time statistics, I investigated applying the Nokogiri gem to ESPN. Lets see what that looks like:</p>

<blockquote><p>game_id = 330510183<br/>
page = Nokogiri::HTML(open(&#8220;http://espn.go.com/ncb/boxscore?id=#{game_id}&#8221;))<br/>
headers = page.css(&#8220;div#my-players-table .colhead th&#8221;)<br/>
player_rows = page.css(&#8220;div#my-players-table td&#8221;)</p></blockquote>

<p>ESPN creates a gameid for each game which is appended to boxscore?id= as well as other pages related to that game such as recap?, playbyplay?, photos?, and conversation?. I haven&#8217;t discovered ESPN&#8217;s logic to generate gameid, perhaps the subject of a later post.</p>

<p>I want to get the column headers:</p>

<blockquote><p>headers = headers.collect {|head| head.text}</p></blockquote>

<p>That return to me an array but with every relevant column header on the table:</p>

<p>[&#8220;STARTERS&#8221;, &#8220;MIN&#8221;, &#8220;FGM-A&#8221;, &#8220;3PM-A&#8221;, &#8220;FTM-A&#8221;, &#8220;OREB&#8221;, &#8220;REB&#8221;, &#8220;AST&#8221;, &#8220;STL&#8221;, &#8220;BLK&#8221;, &#8220;TO&#8221;, &#8220;PF&#8221;, &#8220;PTS&#8221;, &#8220;BENCH&#8221;, &#8220;MIN&#8221;, &#8220;FGM-A&#8221;, &#8220;3PM-A&#8221;, &#8220;FTM-A&#8221;, &#8220;OREB&#8221;, &#8220;REB&#8221;, &#8220;AST&#8221;, &#8220;STL&#8221;, &#8220;BLK&#8221;, &#8220;TO&#8221;, &#8220;PF&#8221;, &#8220;PTS&#8221;, &#8220;TOTALS&#8221;, &#8220;&#8221;, &#8220;FGM-A&#8221;, &#8220;3PM-A&#8221;, &#8220;FTM-A&#8221;, &#8220;OREB&#8221;, &#8220;REB&#8221;, &#8220;AST&#8221;, &#8220;STL&#8221;, &#8220;BLK&#8221;, &#8220;TO&#8221;, &#8220;PF&#8221;, &#8220;PTS&#8221;, &#8220;STARTERS&#8221;, &#8220;MIN&#8221;, &#8220;FGM-A&#8221;, &#8220;3PM-A&#8221;, &#8220;FTM-A&#8221;, &#8220;OREB&#8221;, &#8220;REB&#8221;, &#8220;AST&#8221;, &#8220;STL&#8221;, &#8220;BLK&#8221;, &#8220;TO&#8221;, &#8220;PF&#8221;, &#8220;PTS&#8221;, &#8220;BENCH&#8221;, &#8220;MIN&#8221;, &#8220;FGM-A&#8221;, &#8220;3PM-A&#8221;, &#8220;FTM-A&#8221;, &#8220;OREB&#8221;, &#8220;REB&#8221;, &#8220;AST&#8221;, &#8220;STL&#8221;, &#8220;BLK&#8221;, &#8220;TO&#8221;, &#8220;PF&#8221;, &#8220;PTS&#8221;, &#8220;TOTALS&#8221;, &#8220;&#8221;, &#8220;FGM-A&#8221;, &#8220;3PM-A&#8221;, &#8220;FTM-A&#8221;, &#8220;OREB&#8221;, &#8220;REB&#8221;, &#8220;AST&#8221;, &#8220;STL&#8221;, &#8220;BLK&#8221;, &#8220;TO&#8221;, &#8220;PF&#8221;, &#8220;PTS&#8221;]</p>

<p>Next I want to get all the player data:</p>

<blockquote><p>player_rows = player_rows.collect {|player| player.text}</p></blockquote>

<p>Which also returns an array:</p>

<p>[&#8220;Kadeem Batts, F&#8221;, &#8220;33&#8221;, &#8220;3-10&#8221;, &#8220;0-0&#8221;, &#8220;7-10&#8221;, &#8220;4&#8221;, &#8220;5&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;4&#8221;, &#8220;2&#8221;, &#8220;13&#8221;, &#8220;LaDontae Henton, F&#8221;, &#8220;36&#8221;, &#8220;7-19&#8221;, &#8220;1-2&#8221;, &#8220;0-0&#8221;, &#8220;5&#8221;, &#8220;13&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;2&#8221;, &#8220;3&#8221;, &#8220;15&#8221;, &#8220;Vincent Council, G&#8221;, &#8220;38&#8221;, &#8220;7-18&#8221;, &#8220;0-2&#8221;, &#8220;1-2&#8221;, &#8220;3&#8221;, &#8220;4&#8221;, &#8220;7&#8221;, &#8220;5&#8221;, &#8220;0&#8221;, &#8220;3&#8221;, &#8220;3&#8221;, &#8220;15&#8221;, &#8220;Bryce Cotton, G&#8221;, &#8220;35&#8221;, &#8220;3-10&#8221;, &#8220;2-9&#8221;, &#8220;2-2&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;10&#8221;, &#8220;Kris Dunn, G&#8221;, &#8220;30&#8221;, &#8220;1-3&#8221;, &#8220;0-1&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;3&#8221;, &#8220;2&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;4&#8221;, &#8220;2&#8221;, &#8220;Lee Goldsbrough, F&#8221;, &#8220;7&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;3&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;Brice Kofane, F&#8221;, &#8220;4&#8221;, &#8220;1-1&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;2&#8221;, &#8220;Ted Bancroft, G&#8221;, &#8220;2&#8221;, &#8220;1-1&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;2&#8221;, &#8220;Josh Fortune, G&#8221;, &#8220;15&#8221;, &#8220;0-4&#8221;, &#8220;0-4&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;5&#8221;, &#8220;0&#8221;, &#8220;&#8221;, &#8220;&#8221;, &#8220;23-66&#8221;, &#8220;3-18&#8221;, &#8220;10-14&#8221;, &#8220;12&#8221;, &#8220;29&#8221;, &#8220;11&#8221;, &#8220;8&#8221;, &#8220;2&#8221;, &#8220;14&#8221;, &#8220;21&#8221;, &#8220;59&#8221;, &#8220;&#8221;, &#8220;&#8221;, &#8220;34.8%&#8221;, &#8220;16.7%&#8221;, &#8220;71.4%&#8221;, &#8220;&#8221;, &#8220;Â &#8221;, &#8220;C.J. Fair, F&#8221;, &#8220;33&#8221;, &#8220;6-10&#8221;, &#8220;1-1&#8221;, &#8220;7-8&#8221;, &#8220;0&#8221;, &#8220;10&#8221;, &#8220;2&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;20&#8221;, &#8220;Rakeem Christmas, F&#8221;, &#8220;16&#8221;, &#8220;3-5&#8221;, &#8220;0-0&#8221;, &#8220;0-2&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;3&#8221;, &#8220;3&#8221;, &#8220;4&#8221;, &#8220;6&#8221;, &#8220;Brandon Triche, G&#8221;, &#8220;27&#8221;, &#8220;5-11&#8221;, &#8220;1-3&#8221;, &#8220;3-3&#8221;, &#8220;1&#8221;, &#8220;3&#8221;, &#8220;2&#8221;, &#8220;2&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;1&#8221;, &#8220;14&#8221;, &#8220;Michael Carter-Williams, G&#8221;, &#8220;36&#8221;, &#8220;5-8&#8221;, &#8220;0-0&#8221;, &#8220;5-6&#8221;, &#8220;2&#8221;, &#8220;5&#8221;, &#8220;12&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;2&#8221;, &#8220;2&#8221;, &#8220;15&#8221;, &#8220;Jerami Grant, F&#8221;, &#8220;21&#8221;, &#8220;1-3&#8221;, &#8220;0-0&#8221;, &#8220;1-2&#8221;, &#8220;0&#8221;, &#8220;5&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;3&#8221;, &#8220;James Southerland, F&#8221;, &#8220;26&#8221;, &#8220;7-8&#8221;, &#8220;3-3&#8221;, &#8220;3-4&#8221;, &#8220;1&#8221;, &#8220;6&#8221;, &#8220;1&#8221;, &#8220;2&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;1&#8221;, &#8220;20&#8221;, &#8220;Griffin Hoffmann, G&#8221;, &#8220;1&#8221;, &#8220;0-1&#8221;, &#8220;0-1&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;Matt Lyde-Cajuste, F&#8221;, &#8220;3&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;Nolan Hart, G&#8221;, &#8220;1&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;Baye Keita, C&#8221;, &#8220;19&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;3&#8221;, &#8220;0&#8221;, &#8220;Russ DeRemer, G&#8221;, &#8220;1&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;Trevor Cooney, G&#8221;, &#8220;15&#8221;, &#8220;2-6&#8221;, &#8220;0-2&#8221;, &#8220;0-0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;2&#8221;, &#8220;4&#8221;, &#8220;Noel Jones, F&#8221;, &#8220;1&#8221;, &#8220;1-1&#8221;, &#8220;0-0&#8221;, &#8220;0-0&#8221;, &#8220;1&#8221;, &#8220;1&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;0&#8221;, &#8220;2&#8221;, &#8220;&#8221;, &#8220;&#8221;, &#8220;30-53&#8221;, &#8220;5-10&#8221;, &#8220;19-25&#8221;, &#8220;5&#8221;, &#8220;35&#8221;, &#8220;18&#8221;, &#8220;8&#8221;, &#8220;7&#8221;, &#8220;15&#8221;, &#8220;15&#8221;, &#8220;84&#8221;, &#8220;&#8221;, &#8220;&#8221;, &#8220;56.6%&#8221;, &#8220;50.0%&#8221;, &#8220;76.0%&#8221;, &#8220;&#8221;, &#8220;Â &#8221;]</p>

<p>Next post will explain what to do with all the data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Reasons I'm Learning Ruby]]></title>
    <link href="http://alexgorski.github.com/blog//blog/2013/02/11/5-reasons-im-learning-ruby/"/>
    <updated>2013-02-11T23:59:00-05:00</updated>
    <id>http://alexgorski.github.com/blog//blog/2013/02/11/5-reasons-im-learning-ruby</id>
    <content type="html"><![CDATA[<h3>1: The ability to create and express ideas.</h3>

<p>I&#8217;d rather be a raker than a taker, regulator or investigator.</p>

<h3>2: Objects are everywhere.</h3>

<p>I like the idea of every value being an object.</p>

<h3>3: Convexity and Optionality</h3>

<p>Like creative writing, art, music and other forms of expression, coding has predictable costs (time) but unpredictable payoffs (create something world changing). A coder&#8217;s output follows a convex function.</p>

<h3>4: Skills that are improveable and not employer dependent.</h3>

<p>Most knowledge-workers are constrained by their employer&#8217;s environment which constrains their output. Coding is a skill that is transferable and does not require an employer at all.</p>

<h3>5: I enjoy learning.</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://alexgorski.github.com/blog//blog/2013/02/05/first-post/"/>
    <updated>2013-02-05T18:03:00-05:00</updated>
    <id>http://alexgorski.github.com/blog//blog/2013/02/05/first-post</id>
    <content type="html"><![CDATA[<p>Hello there!</p>
]]></content>
  </entry>
  
</feed>
